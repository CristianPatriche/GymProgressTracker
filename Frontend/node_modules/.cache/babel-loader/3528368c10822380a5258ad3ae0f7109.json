{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let username = sessionStorage.getItem(\"authenticatedUser\");\n    if (username === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let username = sessionStorage.getItem(\"authenticatedUser\");\n    if (username === null) return \"\";\n    return username;\n  }\n\n  setupAxiosInterceptors() {\n    let name = \"Cristi\";\n    let password = \"dummy\";\n    let basicAuthHeader = \"Basic \" + window.btoa(name + \":\" + password);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/cristi/Personal/React_and_SpringBoot/Frontend/gym-progress/src/components/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","getItem","getLoggedInUsername","setupAxiosInterceptors","name","basicAuthHeader","window","btoa","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AAEH;;AAEDI,EAAAA,MAAM,GAAG;AACLF,IAAAA,cAAc,CAACG,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIN,QAAQ,GAAGE,cAAc,CAACK,OAAf,CAAuB,mBAAvB,CAAf;AACA,QAAIP,QAAQ,KAAK,IAAjB,EAAuB,OAAO,KAAP;AACvB,WAAO,IAAP;AACH;;AAEDQ,EAAAA,mBAAmB,GAAG;AAClB,QAAIR,QAAQ,GAAGE,cAAc,CAACK,OAAf,CAAuB,mBAAvB,CAAf;AACA,QAAIP,QAAQ,KAAK,IAAjB,EAAuB,OAAO,EAAP;AACvB,WAAOA,QAAP;AACH;;AAEDS,EAAAA,sBAAsB,GAAG;AACrB,QAAIC,IAAI,GAAG,QAAX;AACA,QAAIT,QAAQ,GAAG,OAAf;AACA,QAAIU,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYH,IAAI,GAAG,GAAP,GAAaT,QAAzB,CAAjC;AAEAJ,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACvC,UAAI,KAAKX,cAAL,EAAJ,EAA2B;AACvBW,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BR,eAA/B;AACH;;AACD,aAAOM,MAAP;AACH,KALD;AAMH;;AAjCuB;;AAoC5B,eAAe,IAAInB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nclass AuthenticationService {\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem(\"authenticatedUser\", username);\n        \n    }\n\n    logout() {\n        sessionStorage.removeItem(\"authenticatedUser\");\n    }\n\n    isUserLoggedIn() {\n        let username = sessionStorage.getItem(\"authenticatedUser\");\n        if (username === null) return false;\n        return true;\n    }\n\n    getLoggedInUsername() {\n        let username = sessionStorage.getItem(\"authenticatedUser\");\n        if (username === null) return \"\";\n        return username;\n    }\n\n    setupAxiosInterceptors() {\n        let name = \"Cristi\";\n        let password = \"dummy\";\n        let basicAuthHeader = \"Basic \" + window.btoa(name + \":\" + password);\n\n        axios.interceptors.request.use((config) => {\n            if (this.isUserLoggedIn()) {\n                config.headers.authorization = basicAuthHeader;\n            }\n            return config;\n        });\n    }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}