{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  createBasicAuthToken(username, password) {\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(\"http://localhost:8080/basicauth\", {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    const myInterceptor = axios.interceptors.request.use(function () {\n      /*...*/\n    });\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let username = sessionStorage.getItem(\"authenticatedUser\");\n    if (username === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let username = sessionStorage.getItem(\"authenticatedUser\");\n    if (username === null) return \"\";\n    return username;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/cristi/Personal/React_and_SpringBoot/Frontend/gym-progress/src/components/AuthenticationService.js"],"names":["axios","AuthenticationService","createBasicAuthToken","username","password","window","btoa","executeBasicAuthenticationService","get","headers","authorization","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","myInterceptor","interceptors","request","use","logout","removeItem","isUserLoggedIn","getItem","getLoggedInUsername","basicAuthHeader","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDG,EAAAA,iCAAiC,CAACJ,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOJ,KAAK,CAACQ,GAAN,CAAU,iCAAV,EAA6C;AAChDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKR,oBAAL,CAA0BC,QAA1B,EAAoCC,QAApC;AADV;AADuC,KAA7C,CAAP;AAKH;;AAEDO,EAAAA,uBAAuB,CAACR,QAAD,EAAWC,QAAX,EAAqB;AACxCQ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CV,QAA5C;AACA,SAAKW,sBAAL,CAA4B,KAAKZ,oBAAL,CAA0BC,QAA1B,EAAoCC,QAApC,CAA5B;AACA,UAAMW,aAAa,GAAGf,KAAK,CAACgB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,YAAY;AAC7D;AACH,KAFqB,CAAtB;AAGH;;AAEDC,EAAAA,MAAM,GAAG;AACLP,IAAAA,cAAc,CAACQ,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIlB,QAAQ,GAAGS,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAf;AACA,QAAInB,QAAQ,KAAK,IAAjB,EAAuB,OAAO,KAAP;AACvB,WAAO,IAAP;AACH;;AAEDoB,EAAAA,mBAAmB,GAAG;AAClB,QAAIpB,QAAQ,GAAGS,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAf;AACA,QAAInB,QAAQ,KAAK,IAAjB,EAAuB,OAAO,EAAP;AACvB,WAAOA,QAAP;AACH;;AAEDW,EAAAA,sBAAsB,CAACU,eAAD,EAAkB;AACpCxB,IAAAA,KAAK,CAACgB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCO,MAAD,IAAY;AACvC,UAAI,KAAKJ,cAAL,EAAJ,EAA2B;AACvBI,QAAAA,MAAM,CAAChB,OAAP,CAAeC,aAAf,GAA+Bc,eAA/B;AACH;;AACD,aAAOC,MAAP;AACH,KALD;AAMH;;AA5CuB;;AA+C5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nclass AuthenticationService {\n    createBasicAuthToken(username, password) {\n        return \"Basic \" + window.btoa(username + \":\" + password);\n    }\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(\"http://localhost:8080/basicauth\", {\n            headers: {\n                authorization: this.createBasicAuthToken(username, password),\n            },\n        });\n    }\n\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem(\"authenticatedUser\", username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n        const myInterceptor = axios.interceptors.request.use(function () {\n            /*...*/\n        });\n    }\n\n    logout() {\n        sessionStorage.removeItem(\"authenticatedUser\");\n    }\n\n    isUserLoggedIn() {\n        let username = sessionStorage.getItem(\"authenticatedUser\");\n        if (username === null) return false;\n        return true;\n    }\n\n    getLoggedInUsername() {\n        let username = sessionStorage.getItem(\"authenticatedUser\");\n        if (username === null) return \"\";\n        return username;\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use((config) => {\n            if (this.isUserLoggedIn()) {\n                config.headers.authorization = basicAuthHeader;\n            }\n            return config;\n        });\n    }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}