{"ast":null,"code":"var _jsxFileName = \"/home/cristi/Personal/React_and_SpringBoot/Frontend/gym-progress/src/components/ProgressComponent.jsx\";\nimport { Component } from \"react\";\nimport moment from \"moment\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProgressComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.params.id,\n      //REACT-6\n      //id: this.props.match.params.id,\n      description: \"\",\n      targetDate: moment(new Date()).format(\"YYYY-MM-DD\")\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.id === -1) {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUserName();\n    TodoDataService.retrieveTodo(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(response.data.targetDate).format(\"YYYY-MM-DD\")\n    }));\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a Description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter atleast 5 Characters in Description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid Target Date\";\n    }\n\n    return errors;\n  }\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName();\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate\n    };\n\n    if (this.state.id === -1) {\n      TodoDataService.createTodo(username, todo).then(() => this.props.navigate(\"/todos\")); //REACT-6\n      //this.props.history.push('/todos')\n    } else {\n      TodoDataService.updateTodo(username, this.state.id, todo).then(() => this.props.navigate(\"/todos\")); //REACT-6\n      //this.props.history.push('/todos')\n    }\n\n    console.log(values);\n  }\n\n  render() {\n    let {\n      description,\n      targetDate\n    } = this.state; //let targetDate = this.state.targetDate\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description,\n            targetDate\n          },\n          onSubmit: this.onSubmit,\n          validateOnChange: false,\n          validateOnBlur: false,\n          validate: this.validate,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"targetDate\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Target Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"date\",\n                name: \"targetDate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ProgressComponent; // class ProgressComponent extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             day: this.props.params.day,\n//             description: \"Learn Forms Now\",\n//             date: moment(new Date()).format(\"YYYY-MM-DD\"),\n//         };\n//         this.onSubmit = this.onSubmit.bind(this);\n//         this.validate = this.validate.bind(this);\n//     }\n//     onSubmit(values) {\n//         console.log(values);\n//     }\n//     validate(values) {\n//         let errors = {};\n//         if (!values.description) {\n//             errors.description = \"Enter a description.\";\n//         } else if (values.description.length < 5) {\n//             errors.description = \"Enter atleast 5 characters in description.\";\n//         }\n//         if (!moment(values.date).isValid()) {\n//             errors.date = \"Enter a valid date.\";\n//         }\n//         return errors;\n//     }\n//     render() {\n//         let { description, date } = this.state;\n//         return (\n//             <div>\n//                 <h1>Progress of day {this.props.params.day}</h1>\n//                 <div className=\"container\">\n//                     <Formik\n//                         initialValues={{ description, date }}\n//                         onSubmit={this.onSubmit}\n//                         validateOnChange={false}\n//                         validateOnBlur={false}\n//                         validate={this.validate}\n//                         enableReinitialize={true}\n//                     >\n//                         {(props) => (\n//                             <Form>\n//                                 <ErrorMessage name=\"description\" className=\"alert alert-warning\" />\n//                                 <ErrorMessage name=\"date\" className=\"alert alert-warning\" />\n//                                 <fieldset className=\"form-group\">\n//                                     <label>Description</label>\n//                                     <Field className=\"form-control\" type=\"text\" name=\"description\" />\n//                                 </fieldset>\n//                                 <fieldset className=\"form-group\">\n//                                     <label>Date</label>\n//                                     <Field className=\"form-control\" type=\"date\" name=\"date\" />\n//                                 </fieldset>\n//                                 <button className=\"btn btn-success\" type=\"submit\">\n//                                     Save\n//                                 </button>\n//                             </Form>\n//                         )}\n//                     </Formik>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// export default ProgressComponent;","map":{"version":3,"sources":["/home/cristi/Personal/React_and_SpringBoot/Frontend/gym-progress/src/components/ProgressComponent.jsx"],"names":["Component","moment","ErrorMessage","Field","Form","Formik","ProgressComponent","constructor","props","state","id","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","username","AuthenticationService","getLoggedInUserName","TodoDataService","retrieveTodo","then","response","setState","data","values","errors","length","isValid","todo","createTodo","navigate","updateTodo","console","log","render"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport moment from \"moment\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\n\nclass ProgressComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: this.props.params.id, //REACT-6\n            //id: this.props.match.params.id,\n            description: \"\",\n            targetDate: moment(new Date()).format(\"YYYY-MM-DD\"),\n        };\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.state.id === -1) {\n            return;\n        }\n\n        let username = AuthenticationService.getLoggedInUserName();\n\n        TodoDataService.retrieveTodo(username, this.state.id).then((response) =>\n            this.setState({\n                description: response.data.description,\n                targetDate: moment(response.data.targetDate).format(\"YYYY-MM-DD\"),\n            })\n        );\n    }\n\n    validate(values) {\n        let errors = {};\n        if (!values.description) {\n            errors.description = \"Enter a Description\";\n        } else if (values.description.length < 5) {\n            errors.description = \"Enter atleast 5 Characters in Description\";\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = \"Enter a valid Target Date\";\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName();\n\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate,\n        };\n\n        if (this.state.id === -1) {\n            TodoDataService.createTodo(username, todo).then(() => this.props.navigate(\"/todos\")); //REACT-6\n            //this.props.history.push('/todos')\n        } else {\n            TodoDataService.updateTodo(username, this.state.id, todo).then(() => this.props.navigate(\"/todos\")); //REACT-6\n            //this.props.history.push('/todos')\n        }\n\n        console.log(values);\n    }\n\n    render() {\n        let { description, targetDate } = this.state;\n        //let targetDate = this.state.targetDate\n\n        return (\n            <div>\n                <h1>Todo</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ description, targetDate }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {(props) => (\n                            <Form>\n                                <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\" />\n                                <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\" />\n                                <fieldset className=\"form-group\">\n                                    <label>Description</label>\n                                    <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                </fieldset>\n                                <fieldset className=\"form-group\">\n                                    <label>Target Date</label>\n                                    <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\n                                </fieldset>\n                                <button className=\"btn btn-success\" type=\"submit\">\n                                    Save\n                                </button>\n                            </Form>\n                        )}\n                    </Formik>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ProgressComponent;\n\n// class ProgressComponent extends Component {\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             day: this.props.params.day,\n//             description: \"Learn Forms Now\",\n//             date: moment(new Date()).format(\"YYYY-MM-DD\"),\n//         };\n\n//         this.onSubmit = this.onSubmit.bind(this);\n//         this.validate = this.validate.bind(this);\n//     }\n\n//     onSubmit(values) {\n//         console.log(values);\n//     }\n\n//     validate(values) {\n//         let errors = {};\n//         if (!values.description) {\n//             errors.description = \"Enter a description.\";\n//         } else if (values.description.length < 5) {\n//             errors.description = \"Enter atleast 5 characters in description.\";\n//         }\n\n//         if (!moment(values.date).isValid()) {\n//             errors.date = \"Enter a valid date.\";\n//         }\n\n//         return errors;\n//     }\n\n//     render() {\n//         let { description, date } = this.state;\n\n//         return (\n//             <div>\n//                 <h1>Progress of day {this.props.params.day}</h1>\n//                 <div className=\"container\">\n//                     <Formik\n//                         initialValues={{ description, date }}\n//                         onSubmit={this.onSubmit}\n//                         validateOnChange={false}\n//                         validateOnBlur={false}\n//                         validate={this.validate}\n//                         enableReinitialize={true}\n//                     >\n//                         {(props) => (\n//                             <Form>\n//                                 <ErrorMessage name=\"description\" className=\"alert alert-warning\" />\n//                                 <ErrorMessage name=\"date\" className=\"alert alert-warning\" />\n//                                 <fieldset className=\"form-group\">\n//                                     <label>Description</label>\n//                                     <Field className=\"form-control\" type=\"text\" name=\"description\" />\n//                                 </fieldset>\n//                                 <fieldset className=\"form-group\">\n//                                     <label>Date</label>\n//                                     <Field className=\"form-control\" type=\"date\" name=\"date\" />\n//                                 </fieldset>\n//                                 <button className=\"btn btn-success\" type=\"submit\">\n//                                     Save\n//                                 </button>\n//                             </Form>\n//                         )}\n//                     </Formik>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n\n// export default ProgressComponent;\n"]},"metadata":{},"sourceType":"module"}