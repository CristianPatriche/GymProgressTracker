{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    axios.get(\"http://localhost:\");\n  }\n\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let username = sessionStorage.getItem(\"authenticatedUser\");\n    if (username === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let username = sessionStorage.getItem(\"authenticatedUser\");\n    if (username === null) return \"\";\n    return username;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/cristi/Personal/React_and_SpringBoot/Frontend/gym-progress/src/components/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","registerSuccessfulLogin","basicAuthHeader","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","getItem","getLoggedInUsername","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClDJ,IAAAA,KAAK,CAACK,GAAN,CAAU,mBAAV;AACH;;AAEDC,EAAAA,uBAAuB,CAACH,QAAD,EAAWC,QAAX,EAAqB;AACxC,QAAIG,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYN,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAM,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CR,QAA5C;AACA,SAAKS,sBAAL,CAA4BL,eAA5B;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIZ,QAAQ,GAAGO,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAf;AACA,QAAIb,QAAQ,KAAK,IAAjB,EAAuB,OAAO,KAAP;AACvB,WAAO,IAAP;AACH;;AAEDc,EAAAA,mBAAmB,GAAG;AAClB,QAAId,QAAQ,GAAGO,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAf;AACA,QAAIb,QAAQ,KAAK,IAAjB,EAAuB,OAAO,EAAP;AACvB,WAAOA,QAAP;AACH;;AAEDS,EAAAA,sBAAsB,CAACL,eAAD,EAAkB;AACpCP,IAAAA,KAAK,CAACkB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACvC,UAAI,KAAKN,cAAL,EAAJ,EAA2B;AACvBM,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BhB,eAA/B;AACH;;AACD,aAAOc,MAAP;AACH,KALD;AAMH;;AApCuB;;AAuC5B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        axios.get(\"http://localhost:\")\n    }\n\n    registerSuccessfulLogin(username, password) {\n        let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n\n        sessionStorage.setItem(\"authenticatedUser\", username);\n        this.setupAxiosInterceptors(basicAuthHeader);\n    }\n\n    logout() {\n        sessionStorage.removeItem(\"authenticatedUser\");\n    }\n\n    isUserLoggedIn() {\n        let username = sessionStorage.getItem(\"authenticatedUser\");\n        if (username === null) return false;\n        return true;\n    }\n\n    getLoggedInUsername() {\n        let username = sessionStorage.getItem(\"authenticatedUser\");\n        if (username === null) return \"\";\n        return username;\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use((config) => {\n            if (this.isUserLoggedIn()) {\n                config.headers.authorization = basicAuthHeader;\n            }\n            return config;\n        });\n    }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}