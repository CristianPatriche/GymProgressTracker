{"ast":null,"code":"import axios from \"axios\";\nimport { API_URL } from \"./Constants\";\nexport const USERNAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n  createBasicAuthToken(username, password) {\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(USERNAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  logout() {\n    sessionStorage.removeItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n    const myInterceptor = axios.interceptors.request.use(function () {});\n    axios.interceptors.request.eject(myInterceptor);\n  }\n\n  isUserLoggedIn() {\n    let username = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n    if (username === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let username = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n    if (username === null) return \"\";\n    return username;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/cristi/Personal/React_and_SpringBoot/Frontend/gym-progress/src/components/AuthenticationService.js"],"names":["axios","API_URL","USERNAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","createBasicAuthToken","username","password","window","btoa","executeBasicAuthenticationService","get","headers","authorization","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","myInterceptor","interceptors","request","use","eject","isUserLoggedIn","getItem","getLoggedInUsername","basicAuthHeader","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,MAAMC,+BAA+B,GAAG,mBAAxC;;AAEP,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDG,EAAAA,iCAAiC,CAACJ,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAON,KAAK,CAACU,GAAN,CAAW,GAAET,OAAQ,YAArB,EAAkC;AACrCU,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKR,oBAAL,CAA0BC,QAA1B,EAAoCC,QAApC;AADV;AAD4B,KAAlC,CAAP;AAKH;;AAEDO,EAAAA,uBAAuB,CAACR,QAAD,EAAWC,QAAX,EAAqB;AACxCQ,IAAAA,cAAc,CAACC,OAAf,CAAuBb,+BAAvB,EAAwDG,QAAxD;AACA,SAAKW,sBAAL,CAA4B,KAAKZ,oBAAL,CAA0BC,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0BhB,+BAA1B;AACA,UAAMiB,aAAa,GAAGnB,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,YAAY,CAAE,CAA7C,CAAtB;AACAtB,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BE,KAA3B,CAAiCJ,aAAjC;AACH;;AAEDK,EAAAA,cAAc,GAAG;AACb,QAAInB,QAAQ,GAAGS,cAAc,CAACW,OAAf,CAAuBvB,+BAAvB,CAAf;AACA,QAAIG,QAAQ,KAAK,IAAjB,EAAuB,OAAO,KAAP;AACvB,WAAO,IAAP;AACH;;AAEDqB,EAAAA,mBAAmB,GAAG;AAClB,QAAIrB,QAAQ,GAAGS,cAAc,CAACW,OAAf,CAAuBvB,+BAAvB,CAAf;AACA,QAAIG,QAAQ,KAAK,IAAjB,EAAuB,OAAO,EAAP;AACvB,WAAOA,QAAP;AACH;;AAEDW,EAAAA,sBAAsB,CAACW,eAAD,EAAkB;AACpC3B,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCM,MAAD,IAAY;AACvC,UAAI,KAAKJ,cAAL,EAAJ,EAA2B;AACvBI,QAAAA,MAAM,CAACjB,OAAP,CAAeC,aAAf,GAA+Be,eAA/B;AACH;;AACD,aAAOC,MAAP;AACH,KALD;AAMH;;AA3CuB;;AA8C5B,eAAe,IAAIzB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\nimport { API_URL } from \"./Constants\";\n\nexport const USERNAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n    createBasicAuthToken(username, password) {\n        return \"Basic \" + window.btoa(username + \":\" + password);\n    }\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`, {\n            headers: {\n                authorization: this.createBasicAuthToken(username, password),\n            },\n        });\n    }\n\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem(USERNAME_SESSION_ATTRIBUTE_NAME, username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n\n    logout() {\n        sessionStorage.removeItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n        const myInterceptor = axios.interceptors.request.use(function () {});\n        axios.interceptors.request.eject(myInterceptor);\n    }\n\n    isUserLoggedIn() {\n        let username = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n        if (username === null) return false;\n        return true;\n    }\n\n    getLoggedInUsername() {\n        let username = sessionStorage.getItem(USERNAME_SESSION_ATTRIBUTE_NAME);\n        if (username === null) return \"\";\n        return username;\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use((config) => {\n            if (this.isUserLoggedIn()) {\n                config.headers.authorization = basicAuthHeader;\n            }\n            return config;\n        });\n    }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}